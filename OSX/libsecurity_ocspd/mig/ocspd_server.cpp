/*
 * IDENTIFICATION:
 * stub generated Mon Jul  3 19:46:36 2017
 * with a MiG generated by bootstrap_cmds-96.20.2
 * OPTIONS: 
 */

/* Module ocspd */

#define	__MIG_check__Request__ocspd_subsystem__ 1

#include <string.h>
#include <mach/ndr.h>
#include <mach/boolean.h>
#include <mach/kern_return.h>
#include <mach/notify.h>
#include <mach/mach_types.h>
#include <mach/message.h>
#include <mach/mig_errors.h>
#include <mach/port.h>
	
/* BEGIN VOUCHER CODE */

#ifndef KERNEL
#if defined(__has_include)
#if __has_include(<mach/mig_voucher_support.h>)
#ifndef USING_VOUCHERS
#define USING_VOUCHERS
#endif
#ifndef __VOUCHER_FORWARD_TYPE_DECLS__
#define __VOUCHER_FORWARD_TYPE_DECLS__
#ifdef __cplusplus
extern "C" {
#endif
	extern boolean_t voucher_mach_msg_set(mach_msg_header_t *msg) __attribute__((weak_import));
#ifdef __cplusplus
}
#endif
#endif // __VOUCHER_FORWARD_TYPE_DECLS__
#endif // __has_include(<mach/mach_voucher_types.h>)
#endif // __has_include
#endif // !KERNEL
	
/* END VOUCHER CODE */

	
/* BEGIN MIG_STRNCPY_ZEROFILL CODE */

#if defined(__has_include)
#if __has_include(<mach/mig_strncpy_zerofill_support.h>)
#ifndef USING_MIG_STRNCPY_ZEROFILL
#define USING_MIG_STRNCPY_ZEROFILL
#endif
#ifndef __MIG_STRNCPY_ZEROFILL_FORWARD_TYPE_DECLS__
#define __MIG_STRNCPY_ZEROFILL_FORWARD_TYPE_DECLS__
#ifdef __cplusplus
extern "C" {
#endif
	extern int mig_strncpy_zerofill(char *dest, const char *src, int len) __attribute__((weak_import));
#ifdef __cplusplus
}
#endif
#endif /* __MIG_STRNCPY_ZEROFILL_FORWARD_TYPE_DECLS__ */
#endif /* __has_include(<mach/mig_strncpy_zerofill_support.h>) */
#endif /* __has_include */
	
/* END MIG_STRNCPY_ZEROFILL CODE */


#include <mach/std_types.h>
#include <mach/mig.h>
#include <mach/mig.h>
#include <mach/mach_types.h>
#include <security_ocspd/ocspdTypes.h>
#include <stdint.h>

#ifndef	mig_internal
#define	mig_internal	static __inline__
#endif	/* mig_internal */

#ifndef	mig_external
#define mig_external
#endif	/* mig_external */

#if	!defined(__MigTypeCheck) && defined(TypeCheck)
#define	__MigTypeCheck		TypeCheck	/* Legacy setting */
#endif	/* !defined(__MigTypeCheck) */

#if	!defined(__MigKernelSpecificCode) && defined(_MIG_KERNEL_SPECIFIC_CODE_)
#define	__MigKernelSpecificCode	_MIG_KERNEL_SPECIFIC_CODE_	/* Legacy setting */
#endif	/* !defined(__MigKernelSpecificCode) */

#ifndef	LimitCheck
#define	LimitCheck 0
#endif	/* LimitCheck */

#ifndef	min
#define	min(a,b)  ( ((a) < (b))? (a): (b) )
#endif	/* min */

#if !defined(_WALIGN_)
#define _WALIGN_(x) (((x) + 3) & ~3)
#endif /* !defined(_WALIGN_) */

#if !defined(_WALIGNSZ_)
#define _WALIGNSZ_(x) _WALIGN_(sizeof(x))
#endif /* !defined(_WALIGNSZ_) */

#ifndef	UseStaticTemplates
#define	UseStaticTemplates	0
#endif	/* UseStaticTemplates */

#ifndef	__DeclareRcvRpc
#define	__DeclareRcvRpc(_NUM_, _NAME_)
#endif	/* __DeclareRcvRpc */

#ifndef	__BeforeRcvRpc
#define	__BeforeRcvRpc(_NUM_, _NAME_)
#endif	/* __BeforeRcvRpc */

#ifndef	__AfterRcvRpc
#define	__AfterRcvRpc(_NUM_, _NAME_)
#endif	/* __AfterRcvRpc */

#ifndef	__DeclareRcvSimple
#define	__DeclareRcvSimple(_NUM_, _NAME_)
#endif	/* __DeclareRcvSimple */

#ifndef	__BeforeRcvSimple
#define	__BeforeRcvSimple(_NUM_, _NAME_)
#endif	/* __BeforeRcvSimple */

#ifndef	__AfterRcvSimple
#define	__AfterRcvSimple(_NUM_, _NAME_)
#endif	/* __AfterRcvSimple */

#define novalue void

#define msgh_request_port	msgh_local_port
#define MACH_MSGH_BITS_REQUEST(bits)	MACH_MSGH_BITS_LOCAL(bits)
#define msgh_reply_port		msgh_remote_port
#define MACH_MSGH_BITS_REPLY(bits)	MACH_MSGH_BITS_REMOTE(bits)

#define MIG_RETURN_ERROR(X, code)	{\
				((mig_reply_error_t *)X)->RetCode = code;\
				((mig_reply_error_t *)X)->NDR = NDR_record;\
				return;\
				}

/* typedefs for all requests */

#ifndef __Request__ocspd_subsystem__defined
#define __Request__ocspd_subsystem__defined

#ifdef  __MigPackStructs
#pragma pack(4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		/* start of the kernel processed data */
		mach_msg_body_t msgh_body;
		mach_msg_ool_descriptor_t ocsp_req;
		/* end of the kernel processed data */
		NDR_record_t NDR;
		mach_msg_type_number_t ocsp_reqCnt;
	} __Request__ocspdFetch_t __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack()
#endif

#ifdef  __MigPackStructs
#pragma pack(4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		/* start of the kernel processed data */
		mach_msg_body_t msgh_body;
		mach_msg_ool_descriptor_t certID;
		/* end of the kernel processed data */
		NDR_record_t NDR;
		mach_msg_type_number_t certIDCnt;
	} __Request__ocspdCacheFlush_t __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack()
#endif

#ifdef  __MigPackStructs
#pragma pack(4)
#endif
	typedef struct {
		mach_msg_header_t Head;
	} __Request__ocspdCacheFlushStale_t __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack()
#endif

#ifdef  __MigPackStructs
#pragma pack(4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		/* start of the kernel processed data */
		mach_msg_body_t msgh_body;
		mach_msg_ool_descriptor_t cert_url;
		/* end of the kernel processed data */
		NDR_record_t NDR;
		mach_msg_type_number_t cert_urlCnt;
	} __Request__certFetch_t __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack()
#endif

#ifdef  __MigPackStructs
#pragma pack(4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		/* start of the kernel processed data */
		mach_msg_body_t msgh_body;
		mach_msg_ool_descriptor_t crl_url;
		mach_msg_ool_descriptor_t crl_issuer;
		mach_msg_ool_descriptor_t verify_time;
		/* end of the kernel processed data */
		NDR_record_t NDR;
		mach_msg_type_number_t crl_urlCnt;
		mach_msg_type_number_t crl_issuerCnt;
		boolean_t cache_read;
		boolean_t cache_write;
		mach_msg_type_number_t verify_timeCnt;
	} __Request__crlFetch_t __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack()
#endif

#ifdef  __MigPackStructs
#pragma pack(4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		NDR_record_t NDR;
		uint32_t stale_days;
		uint32_t expire_overlap_seconds;
		boolean_t purge_all;
		boolean_t full_crypto_verify;
	} __Request__crlRefresh_t __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack()
#endif

#ifdef  __MigPackStructs
#pragma pack(4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		/* start of the kernel processed data */
		mach_msg_body_t msgh_body;
		mach_msg_ool_descriptor_t cert_url;
		/* end of the kernel processed data */
		NDR_record_t NDR;
		mach_msg_type_number_t cert_urlCnt;
	} __Request__crlFlush_t __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack()
#endif

#ifdef  __MigPackStructs
#pragma pack(4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		NDR_record_t NDR;
		uint32_t domain;
	} __Request__trustSettingsRead_t __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack()
#endif

#ifdef  __MigPackStructs
#pragma pack(4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		/* start of the kernel processed data */
		mach_msg_body_t msgh_body;
		mach_msg_port_descriptor_t clientport;
		mach_msg_ool_descriptor_t authBlob;
		mach_msg_ool_descriptor_t trustSettings;
		/* end of the kernel processed data */
		NDR_record_t NDR;
		uint32_t domain;
		mach_msg_type_number_t authBlobCnt;
		mach_msg_type_number_t trustSettingsCnt;
	} __Request__trustSettingsWrite_t __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack()
#endif

#ifdef  __MigPackStructs
#pragma pack(4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		/* start of the kernel processed data */
		mach_msg_body_t msgh_body;
		mach_msg_ool_descriptor_t serial_number;
		mach_msg_ool_descriptor_t cert_issuers;
		mach_msg_ool_descriptor_t crl_issuer;
		mach_msg_ool_descriptor_t crl_url;
		/* end of the kernel processed data */
		NDR_record_t NDR;
		mach_msg_type_number_t serial_numberCnt;
		mach_msg_type_number_t cert_issuersCnt;
		mach_msg_type_number_t crl_issuerCnt;
		mach_msg_type_number_t crl_urlCnt;
	} __Request__crlStatus_t __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack()
#endif
#endif /* !__Request__ocspd_subsystem__defined */

/* typedefs for all replies */

#ifndef __Reply__ocspd_subsystem__defined
#define __Reply__ocspd_subsystem__defined

#ifdef  __MigPackStructs
#pragma pack(4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		/* start of the kernel processed data */
		mach_msg_body_t msgh_body;
		mach_msg_ool_descriptor_t ocsp_rep;
		/* end of the kernel processed data */
		NDR_record_t NDR;
		mach_msg_type_number_t ocsp_repCnt;
	} __Reply__ocspdFetch_t __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack()
#endif

#ifdef  __MigPackStructs
#pragma pack(4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		NDR_record_t NDR;
		kern_return_t RetCode;
	} __Reply__ocspdCacheFlush_t __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack()
#endif

#ifdef  __MigPackStructs
#pragma pack(4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		NDR_record_t NDR;
		kern_return_t RetCode;
	} __Reply__ocspdCacheFlushStale_t __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack()
#endif

#ifdef  __MigPackStructs
#pragma pack(4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		/* start of the kernel processed data */
		mach_msg_body_t msgh_body;
		mach_msg_ool_descriptor_t cert_data;
		/* end of the kernel processed data */
		NDR_record_t NDR;
		mach_msg_type_number_t cert_dataCnt;
	} __Reply__certFetch_t __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack()
#endif

#ifdef  __MigPackStructs
#pragma pack(4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		/* start of the kernel processed data */
		mach_msg_body_t msgh_body;
		mach_msg_ool_descriptor_t crl_data;
		/* end of the kernel processed data */
		NDR_record_t NDR;
		mach_msg_type_number_t crl_dataCnt;
	} __Reply__crlFetch_t __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack()
#endif

#ifdef  __MigPackStructs
#pragma pack(4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		NDR_record_t NDR;
		kern_return_t RetCode;
	} __Reply__crlRefresh_t __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack()
#endif

#ifdef  __MigPackStructs
#pragma pack(4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		NDR_record_t NDR;
		kern_return_t RetCode;
	} __Reply__crlFlush_t __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack()
#endif

#ifdef  __MigPackStructs
#pragma pack(4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		/* start of the kernel processed data */
		mach_msg_body_t msgh_body;
		mach_msg_ool_descriptor_t trustSettings;
		/* end of the kernel processed data */
		NDR_record_t NDR;
		mach_msg_type_number_t trustSettingsCnt;
		OSStatus rcode;
	} __Reply__trustSettingsRead_t __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack()
#endif

#ifdef  __MigPackStructs
#pragma pack(4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		NDR_record_t NDR;
		kern_return_t RetCode;
		OSStatus rcode;
	} __Reply__trustSettingsWrite_t __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack()
#endif

#ifdef  __MigPackStructs
#pragma pack(4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		NDR_record_t NDR;
		kern_return_t RetCode;
	} __Reply__crlStatus_t __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack()
#endif
#endif /* !__Reply__ocspd_subsystem__defined */


/* union of all replies */

#ifndef __ReplyUnion__ocsp_server_ocspd_subsystem__defined
#define __ReplyUnion__ocsp_server_ocspd_subsystem__defined
union __ReplyUnion__ocsp_server_ocspd_subsystem {
	__Reply__ocspdFetch_t Reply_ocspdFetch;
	__Reply__ocspdCacheFlush_t Reply_ocspdCacheFlush;
	__Reply__ocspdCacheFlushStale_t Reply_ocspdCacheFlushStale;
	__Reply__certFetch_t Reply_certFetch;
	__Reply__crlFetch_t Reply_crlFetch;
	__Reply__crlRefresh_t Reply_crlRefresh;
	__Reply__crlFlush_t Reply_crlFlush;
	__Reply__trustSettingsRead_t Reply_trustSettingsRead;
	__Reply__trustSettingsWrite_t Reply_trustSettingsWrite;
	__Reply__crlStatus_t Reply_crlStatus;
};
#endif /* __RequestUnion__ocsp_server_ocspd_subsystem__defined */
/* Forward Declarations */


mig_internal novalue _XocspdFetch
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP);

mig_internal novalue _XocspdCacheFlush
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP);

mig_internal novalue _XocspdCacheFlushStale
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP);

mig_internal novalue _XcertFetch
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP);

mig_internal novalue _XcrlFetch
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP);

mig_internal novalue _XcrlRefresh
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP);

mig_internal novalue _XcrlFlush
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP);

mig_internal novalue _XtrustSettingsRead
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP);

mig_internal novalue _XtrustSettingsWrite
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP);

mig_internal novalue _XcrlStatus
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP);


#if ( __MigTypeCheck )
#if __MIG_check__Request__ocspd_subsystem__
#if !defined(__MIG_check__Request__ocspdFetch_t__defined)
#define __MIG_check__Request__ocspdFetch_t__defined

mig_internal kern_return_t __MIG_check__Request__ocspdFetch_t(__attribute__((__unused__)) __Request__ocspdFetch_t *In0P)
{

	typedef __Request__ocspdFetch_t __Request;
#if	__MigTypeCheck
	if (!(In0P->Head.msgh_bits & MACH_MSGH_BITS_COMPLEX) ||
	    (In0P->msgh_body.msgh_descriptor_count != 1) ||
	    (In0P->Head.msgh_size != (mach_msg_size_t)sizeof(__Request)))
		return MIG_BAD_ARGUMENTS;
#endif	/* __MigTypeCheck */

#if	__MigTypeCheck
	if (In0P->ocsp_req.type != MACH_MSG_OOL_DESCRIPTOR)
		return MIG_TYPE_ERROR;
#endif	/* __MigTypeCheck */

#if __MigTypeCheck
	if (In0P->ocsp_req.size != In0P->ocsp_reqCnt)
		return MIG_TYPE_ERROR;
#endif	/* __MigTypeCheck */

	return MACH_MSG_SUCCESS;
}
#endif /* !defined(__MIG_check__Request__ocspdFetch_t__defined) */
#endif /* __MIG_check__Request__ocspd_subsystem__ */
#endif /* ( __MigTypeCheck ) */


/* Routine ocspdFetch */
#ifdef	mig_external
mig_external
#else
extern
#endif	/* mig_external */
kern_return_t ocsp_server_ocspdFetch
(
	mach_port_t serverport,
	audit_token_t sourceAudit,
	Data ocsp_req,
	mach_msg_type_number_t ocsp_reqCnt,
	Data *ocsp_rep,
	mach_msg_type_number_t *ocsp_repCnt
);

/* Routine ocspdFetch */
mig_internal novalue _XocspdFetch
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP)
{

#ifdef  __MigPackStructs
#pragma pack(4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		/* start of the kernel processed data */
		mach_msg_body_t msgh_body;
		mach_msg_ool_descriptor_t ocsp_req;
		/* end of the kernel processed data */
		NDR_record_t NDR;
		mach_msg_type_number_t ocsp_reqCnt;
		mach_msg_max_trailer_t trailer;
	} Request __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack()
#endif
	typedef __Request__ocspdFetch_t __Request;
	typedef __Reply__ocspdFetch_t Reply __attribute__((unused));

	/*
	 * typedef struct {
	 * 	mach_msg_header_t Head;
	 * 	NDR_record_t NDR;
	 * 	kern_return_t RetCode;
	 * } mig_reply_error_t;
	 */

	Request *In0P = (Request *) InHeadP;
	Reply *OutP = (Reply *) OutHeadP;
	mach_msg_max_trailer_t *TrailerP;
#if	__MigTypeCheck
	unsigned int trailer_size;
#endif	/* __MigTypeCheck */
#ifdef	__MIG_check__Request__ocspdFetch_t__defined
	kern_return_t check_result;
#endif	/* __MIG_check__Request__ocspdFetch_t__defined */

#if	UseStaticTemplates
	const static mach_msg_ool_descriptor_t ocsp_repTemplate = {
		/* addr = */		(void *)0,
		/* size = */		0,
		/* deal = */		FALSE,
		/* copy = */		MACH_MSG_VIRTUAL_COPY,
		/* pad2 = */		0,
		/* type = */		MACH_MSG_OOL_DESCRIPTOR,
	};
#endif	/* UseStaticTemplates */

	kern_return_t RetCode;
	__DeclareRcvRpc(33003, "ocspdFetch")
	__BeforeRcvRpc(33003, "ocspdFetch")

#if	defined(__MIG_check__Request__ocspdFetch_t__defined)
	check_result = __MIG_check__Request__ocspdFetch_t((__Request *)In0P);
	if (check_result != MACH_MSG_SUCCESS)
		{ MIG_RETURN_ERROR(OutP, check_result); }
#endif	/* defined(__MIG_check__Request__ocspdFetch_t__defined) */

	TrailerP = (mach_msg_max_trailer_t *)((vm_offset_t)In0P +
		round_msg(In0P->Head.msgh_size));
	if (TrailerP->msgh_trailer_type != MACH_MSG_TRAILER_FORMAT_0)
		{ MIG_RETURN_ERROR(In0P, MIG_TRAILER_ERROR); }
#if	__MigTypeCheck
	trailer_size = TrailerP->msgh_trailer_size -
		(mach_msg_size_t)(sizeof(mach_msg_trailer_type_t) - sizeof(mach_msg_trailer_size_t));
#endif	/* __MigTypeCheck */
#if	__MigTypeCheck
	if (trailer_size < (mach_msg_size_t)sizeof(audit_token_t))
		{ MIG_RETURN_ERROR(OutP, MIG_TRAILER_ERROR); }
	trailer_size -= (mach_msg_size_t)sizeof(audit_token_t);
#endif	/* __MigTypeCheck */
#if	UseStaticTemplates
	OutP->ocsp_rep = ocsp_repTemplate;
#else	/* UseStaticTemplates */
	OutP->ocsp_rep.deallocate =  FALSE;
	OutP->ocsp_rep.copy = MACH_MSG_VIRTUAL_COPY;
	OutP->ocsp_rep.pad1 = 0;
	OutP->ocsp_rep.type = MACH_MSG_OOL_DESCRIPTOR;
#if defined(KERNEL) && !defined(__LP64__)
	OutP->ocsp_rep.pad_end = 0;
#endif
#endif	/* UseStaticTemplates */


	OutP->ocsp_repCnt = 0;

	RetCode = ocsp_server_ocspdFetch(In0P->Head.msgh_request_port, TrailerP->msgh_audit, (Data)(In0P->ocsp_req.address), In0P->ocsp_req.size, (Data *)&(OutP->ocsp_rep.address), &OutP->ocsp_repCnt);
	mig_deallocate((vm_offset_t) In0P->ocsp_req.address, In0P->ocsp_req.size);
	In0P->ocsp_req.address = (void *) 0;
	In0P->ocsp_req.size = (mach_msg_size_t) 0;
	if (RetCode != KERN_SUCCESS) {
		MIG_RETURN_ERROR(OutP, RetCode);
	}
	OutP->ocsp_rep.size = OutP->ocsp_repCnt;


	OutP->NDR = NDR_record;


	OutP->Head.msgh_bits |= MACH_MSGH_BITS_COMPLEX;
	OutP->Head.msgh_size = (mach_msg_size_t)(sizeof(Reply));
	OutP->msgh_body.msgh_descriptor_count = 1;
	__AfterRcvRpc(33003, "ocspdFetch")
}

#if ( __MigTypeCheck )
#if __MIG_check__Request__ocspd_subsystem__
#if !defined(__MIG_check__Request__ocspdCacheFlush_t__defined)
#define __MIG_check__Request__ocspdCacheFlush_t__defined

mig_internal kern_return_t __MIG_check__Request__ocspdCacheFlush_t(__attribute__((__unused__)) __Request__ocspdCacheFlush_t *In0P)
{

	typedef __Request__ocspdCacheFlush_t __Request;
#if	__MigTypeCheck
	if (!(In0P->Head.msgh_bits & MACH_MSGH_BITS_COMPLEX) ||
	    (In0P->msgh_body.msgh_descriptor_count != 1) ||
	    (In0P->Head.msgh_size != (mach_msg_size_t)sizeof(__Request)))
		return MIG_BAD_ARGUMENTS;
#endif	/* __MigTypeCheck */

#if	__MigTypeCheck
	if (In0P->certID.type != MACH_MSG_OOL_DESCRIPTOR)
		return MIG_TYPE_ERROR;
#endif	/* __MigTypeCheck */

#if __MigTypeCheck
	if (In0P->certID.size != In0P->certIDCnt)
		return MIG_TYPE_ERROR;
#endif	/* __MigTypeCheck */

	return MACH_MSG_SUCCESS;
}
#endif /* !defined(__MIG_check__Request__ocspdCacheFlush_t__defined) */
#endif /* __MIG_check__Request__ocspd_subsystem__ */
#endif /* ( __MigTypeCheck ) */


/* Routine ocspdCacheFlush */
#ifdef	mig_external
mig_external
#else
extern
#endif	/* mig_external */
kern_return_t ocsp_server_ocspdCacheFlush
(
	mach_port_t serverport,
	Data certID,
	mach_msg_type_number_t certIDCnt
);

/* Routine ocspdCacheFlush */
mig_internal novalue _XocspdCacheFlush
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP)
{

#ifdef  __MigPackStructs
#pragma pack(4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		/* start of the kernel processed data */
		mach_msg_body_t msgh_body;
		mach_msg_ool_descriptor_t certID;
		/* end of the kernel processed data */
		NDR_record_t NDR;
		mach_msg_type_number_t certIDCnt;
		mach_msg_trailer_t trailer;
	} Request __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack()
#endif
	typedef __Request__ocspdCacheFlush_t __Request;
	typedef __Reply__ocspdCacheFlush_t Reply __attribute__((unused));

	/*
	 * typedef struct {
	 * 	mach_msg_header_t Head;
	 * 	NDR_record_t NDR;
	 * 	kern_return_t RetCode;
	 * } mig_reply_error_t;
	 */

	Request *In0P = (Request *) InHeadP;
	Reply *OutP = (Reply *) OutHeadP;
#ifdef	__MIG_check__Request__ocspdCacheFlush_t__defined
	kern_return_t check_result;
#endif	/* __MIG_check__Request__ocspdCacheFlush_t__defined */

	__DeclareRcvRpc(33004, "ocspdCacheFlush")
	__BeforeRcvRpc(33004, "ocspdCacheFlush")

#if	defined(__MIG_check__Request__ocspdCacheFlush_t__defined)
	check_result = __MIG_check__Request__ocspdCacheFlush_t((__Request *)In0P);
	if (check_result != MACH_MSG_SUCCESS)
		{ MIG_RETURN_ERROR(OutP, check_result); }
#endif	/* defined(__MIG_check__Request__ocspdCacheFlush_t__defined) */

	OutP->RetCode = ocsp_server_ocspdCacheFlush(In0P->Head.msgh_request_port, (Data)(In0P->certID.address), In0P->certID.size);
	mig_deallocate((vm_offset_t) In0P->certID.address, In0P->certID.size);
	In0P->certID.address = (void *) 0;
	In0P->certID.size = (mach_msg_size_t) 0;

	OutP->NDR = NDR_record;


	__AfterRcvRpc(33004, "ocspdCacheFlush")
}

#if ( __MigTypeCheck )
#if __MIG_check__Request__ocspd_subsystem__
#if !defined(__MIG_check__Request__ocspdCacheFlushStale_t__defined)
#define __MIG_check__Request__ocspdCacheFlushStale_t__defined

mig_internal kern_return_t __MIG_check__Request__ocspdCacheFlushStale_t(__attribute__((__unused__)) __Request__ocspdCacheFlushStale_t *In0P)
{

	typedef __Request__ocspdCacheFlushStale_t __Request;
#if	__MigTypeCheck
	if ((In0P->Head.msgh_bits & MACH_MSGH_BITS_COMPLEX) ||
	    (In0P->Head.msgh_size != (mach_msg_size_t)sizeof(__Request)))
		return MIG_BAD_ARGUMENTS;
#endif	/* __MigTypeCheck */

	return MACH_MSG_SUCCESS;
}
#endif /* !defined(__MIG_check__Request__ocspdCacheFlushStale_t__defined) */
#endif /* __MIG_check__Request__ocspd_subsystem__ */
#endif /* ( __MigTypeCheck ) */


/* Routine ocspdCacheFlushStale */
#ifdef	mig_external
mig_external
#else
extern
#endif	/* mig_external */
kern_return_t ocsp_server_ocspdCacheFlushStale
(
	mach_port_t serverport
);

/* Routine ocspdCacheFlushStale */
mig_internal novalue _XocspdCacheFlushStale
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP)
{

#ifdef  __MigPackStructs
#pragma pack(4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		mach_msg_trailer_t trailer;
	} Request __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack()
#endif
	typedef __Request__ocspdCacheFlushStale_t __Request;
	typedef __Reply__ocspdCacheFlushStale_t Reply __attribute__((unused));

	/*
	 * typedef struct {
	 * 	mach_msg_header_t Head;
	 * 	NDR_record_t NDR;
	 * 	kern_return_t RetCode;
	 * } mig_reply_error_t;
	 */

	Request *In0P = (Request *) InHeadP;
	Reply *OutP = (Reply *) OutHeadP;
#ifdef	__MIG_check__Request__ocspdCacheFlushStale_t__defined
	kern_return_t check_result;
#endif	/* __MIG_check__Request__ocspdCacheFlushStale_t__defined */

	__DeclareRcvRpc(33005, "ocspdCacheFlushStale")
	__BeforeRcvRpc(33005, "ocspdCacheFlushStale")

#if	defined(__MIG_check__Request__ocspdCacheFlushStale_t__defined)
	check_result = __MIG_check__Request__ocspdCacheFlushStale_t((__Request *)In0P);
	if (check_result != MACH_MSG_SUCCESS)
		{ MIG_RETURN_ERROR(OutP, check_result); }
#endif	/* defined(__MIG_check__Request__ocspdCacheFlushStale_t__defined) */

	OutP->RetCode = ocsp_server_ocspdCacheFlushStale(In0P->Head.msgh_request_port);

	OutP->NDR = NDR_record;


	__AfterRcvRpc(33005, "ocspdCacheFlushStale")
}

#if ( __MigTypeCheck )
#if __MIG_check__Request__ocspd_subsystem__
#if !defined(__MIG_check__Request__certFetch_t__defined)
#define __MIG_check__Request__certFetch_t__defined

mig_internal kern_return_t __MIG_check__Request__certFetch_t(__attribute__((__unused__)) __Request__certFetch_t *In0P)
{

	typedef __Request__certFetch_t __Request;
#if	__MigTypeCheck
	if (!(In0P->Head.msgh_bits & MACH_MSGH_BITS_COMPLEX) ||
	    (In0P->msgh_body.msgh_descriptor_count != 1) ||
	    (In0P->Head.msgh_size != (mach_msg_size_t)sizeof(__Request)))
		return MIG_BAD_ARGUMENTS;
#endif	/* __MigTypeCheck */

#if	__MigTypeCheck
	if (In0P->cert_url.type != MACH_MSG_OOL_DESCRIPTOR)
		return MIG_TYPE_ERROR;
#endif	/* __MigTypeCheck */

#if __MigTypeCheck
	if (In0P->cert_url.size != In0P->cert_urlCnt)
		return MIG_TYPE_ERROR;
#endif	/* __MigTypeCheck */

	return MACH_MSG_SUCCESS;
}
#endif /* !defined(__MIG_check__Request__certFetch_t__defined) */
#endif /* __MIG_check__Request__ocspd_subsystem__ */
#endif /* ( __MigTypeCheck ) */


/* Routine certFetch */
#ifdef	mig_external
mig_external
#else
extern
#endif	/* mig_external */
kern_return_t ocsp_server_certFetch
(
	mach_port_t serverport,
	audit_token_t sourceAudit,
	Data cert_url,
	mach_msg_type_number_t cert_urlCnt,
	Data *cert_data,
	mach_msg_type_number_t *cert_dataCnt
);

/* Routine certFetch */
mig_internal novalue _XcertFetch
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP)
{

#ifdef  __MigPackStructs
#pragma pack(4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		/* start of the kernel processed data */
		mach_msg_body_t msgh_body;
		mach_msg_ool_descriptor_t cert_url;
		/* end of the kernel processed data */
		NDR_record_t NDR;
		mach_msg_type_number_t cert_urlCnt;
		mach_msg_max_trailer_t trailer;
	} Request __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack()
#endif
	typedef __Request__certFetch_t __Request;
	typedef __Reply__certFetch_t Reply __attribute__((unused));

	/*
	 * typedef struct {
	 * 	mach_msg_header_t Head;
	 * 	NDR_record_t NDR;
	 * 	kern_return_t RetCode;
	 * } mig_reply_error_t;
	 */

	Request *In0P = (Request *) InHeadP;
	Reply *OutP = (Reply *) OutHeadP;
	mach_msg_max_trailer_t *TrailerP;
#if	__MigTypeCheck
	unsigned int trailer_size;
#endif	/* __MigTypeCheck */
#ifdef	__MIG_check__Request__certFetch_t__defined
	kern_return_t check_result;
#endif	/* __MIG_check__Request__certFetch_t__defined */

#if	UseStaticTemplates
	const static mach_msg_ool_descriptor_t cert_dataTemplate = {
		/* addr = */		(void *)0,
		/* size = */		0,
		/* deal = */		FALSE,
		/* copy = */		MACH_MSG_VIRTUAL_COPY,
		/* pad2 = */		0,
		/* type = */		MACH_MSG_OOL_DESCRIPTOR,
	};
#endif	/* UseStaticTemplates */

	kern_return_t RetCode;
	__DeclareRcvRpc(33006, "certFetch")
	__BeforeRcvRpc(33006, "certFetch")

#if	defined(__MIG_check__Request__certFetch_t__defined)
	check_result = __MIG_check__Request__certFetch_t((__Request *)In0P);
	if (check_result != MACH_MSG_SUCCESS)
		{ MIG_RETURN_ERROR(OutP, check_result); }
#endif	/* defined(__MIG_check__Request__certFetch_t__defined) */

	TrailerP = (mach_msg_max_trailer_t *)((vm_offset_t)In0P +
		round_msg(In0P->Head.msgh_size));
	if (TrailerP->msgh_trailer_type != MACH_MSG_TRAILER_FORMAT_0)
		{ MIG_RETURN_ERROR(In0P, MIG_TRAILER_ERROR); }
#if	__MigTypeCheck
	trailer_size = TrailerP->msgh_trailer_size -
		(mach_msg_size_t)(sizeof(mach_msg_trailer_type_t) - sizeof(mach_msg_trailer_size_t));
#endif	/* __MigTypeCheck */
#if	__MigTypeCheck
	if (trailer_size < (mach_msg_size_t)sizeof(audit_token_t))
		{ MIG_RETURN_ERROR(OutP, MIG_TRAILER_ERROR); }
	trailer_size -= (mach_msg_size_t)sizeof(audit_token_t);
#endif	/* __MigTypeCheck */
#if	UseStaticTemplates
	OutP->cert_data = cert_dataTemplate;
#else	/* UseStaticTemplates */
	OutP->cert_data.deallocate =  FALSE;
	OutP->cert_data.copy = MACH_MSG_VIRTUAL_COPY;
	OutP->cert_data.pad1 = 0;
	OutP->cert_data.type = MACH_MSG_OOL_DESCRIPTOR;
#if defined(KERNEL) && !defined(__LP64__)
	OutP->cert_data.pad_end = 0;
#endif
#endif	/* UseStaticTemplates */


	OutP->cert_dataCnt = 0;

	RetCode = ocsp_server_certFetch(In0P->Head.msgh_request_port, TrailerP->msgh_audit, (Data)(In0P->cert_url.address), In0P->cert_url.size, (Data *)&(OutP->cert_data.address), &OutP->cert_dataCnt);
	mig_deallocate((vm_offset_t) In0P->cert_url.address, In0P->cert_url.size);
	In0P->cert_url.address = (void *) 0;
	In0P->cert_url.size = (mach_msg_size_t) 0;
	if (RetCode != KERN_SUCCESS) {
		MIG_RETURN_ERROR(OutP, RetCode);
	}
	OutP->cert_data.size = OutP->cert_dataCnt;


	OutP->NDR = NDR_record;


	OutP->Head.msgh_bits |= MACH_MSGH_BITS_COMPLEX;
	OutP->Head.msgh_size = (mach_msg_size_t)(sizeof(Reply));
	OutP->msgh_body.msgh_descriptor_count = 1;
	__AfterRcvRpc(33006, "certFetch")
}

#if ( __MigTypeCheck )
#if __MIG_check__Request__ocspd_subsystem__
#if !defined(__MIG_check__Request__crlFetch_t__defined)
#define __MIG_check__Request__crlFetch_t__defined

mig_internal kern_return_t __MIG_check__Request__crlFetch_t(__attribute__((__unused__)) __Request__crlFetch_t *In0P)
{

	typedef __Request__crlFetch_t __Request;
#if	__MigTypeCheck
	if (!(In0P->Head.msgh_bits & MACH_MSGH_BITS_COMPLEX) ||
	    (In0P->msgh_body.msgh_descriptor_count != 3) ||
	    (In0P->Head.msgh_size != (mach_msg_size_t)sizeof(__Request)))
		return MIG_BAD_ARGUMENTS;
#endif	/* __MigTypeCheck */

#if	__MigTypeCheck
	if (In0P->crl_url.type != MACH_MSG_OOL_DESCRIPTOR)
		return MIG_TYPE_ERROR;
#endif	/* __MigTypeCheck */

#if	__MigTypeCheck
	if (In0P->crl_issuer.type != MACH_MSG_OOL_DESCRIPTOR)
		return MIG_TYPE_ERROR;
#endif	/* __MigTypeCheck */

#if	__MigTypeCheck
	if (In0P->verify_time.type != MACH_MSG_OOL_DESCRIPTOR)
		return MIG_TYPE_ERROR;
#endif	/* __MigTypeCheck */

#if __MigTypeCheck
	if (In0P->crl_url.size != In0P->crl_urlCnt)
		return MIG_TYPE_ERROR;
	if (In0P->crl_issuer.size != In0P->crl_issuerCnt)
		return MIG_TYPE_ERROR;
	if (In0P->verify_time.size != In0P->verify_timeCnt)
		return MIG_TYPE_ERROR;
#endif	/* __MigTypeCheck */

	return MACH_MSG_SUCCESS;
}
#endif /* !defined(__MIG_check__Request__crlFetch_t__defined) */
#endif /* __MIG_check__Request__ocspd_subsystem__ */
#endif /* ( __MigTypeCheck ) */


/* Routine crlFetch */
#ifdef	mig_external
mig_external
#else
extern
#endif	/* mig_external */
kern_return_t ocsp_server_crlFetch
(
	mach_port_t serverport,
	audit_token_t sourceAudit,
	Data crl_url,
	mach_msg_type_number_t crl_urlCnt,
	Data crl_issuer,
	mach_msg_type_number_t crl_issuerCnt,
	boolean_t cache_read,
	boolean_t cache_write,
	Data verify_time,
	mach_msg_type_number_t verify_timeCnt,
	Data *crl_data,
	mach_msg_type_number_t *crl_dataCnt
);

/* Routine crlFetch */
mig_internal novalue _XcrlFetch
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP)
{

#ifdef  __MigPackStructs
#pragma pack(4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		/* start of the kernel processed data */
		mach_msg_body_t msgh_body;
		mach_msg_ool_descriptor_t crl_url;
		mach_msg_ool_descriptor_t crl_issuer;
		mach_msg_ool_descriptor_t verify_time;
		/* end of the kernel processed data */
		NDR_record_t NDR;
		mach_msg_type_number_t crl_urlCnt;
		mach_msg_type_number_t crl_issuerCnt;
		boolean_t cache_read;
		boolean_t cache_write;
		mach_msg_type_number_t verify_timeCnt;
		mach_msg_max_trailer_t trailer;
	} Request __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack()
#endif
	typedef __Request__crlFetch_t __Request;
	typedef __Reply__crlFetch_t Reply __attribute__((unused));

	/*
	 * typedef struct {
	 * 	mach_msg_header_t Head;
	 * 	NDR_record_t NDR;
	 * 	kern_return_t RetCode;
	 * } mig_reply_error_t;
	 */

	Request *In0P = (Request *) InHeadP;
	Reply *OutP = (Reply *) OutHeadP;
	mach_msg_max_trailer_t *TrailerP;
#if	__MigTypeCheck
	unsigned int trailer_size;
#endif	/* __MigTypeCheck */
#ifdef	__MIG_check__Request__crlFetch_t__defined
	kern_return_t check_result;
#endif	/* __MIG_check__Request__crlFetch_t__defined */

#if	UseStaticTemplates
	const static mach_msg_ool_descriptor_t crl_dataTemplate = {
		/* addr = */		(void *)0,
		/* size = */		0,
		/* deal = */		FALSE,
		/* copy = */		MACH_MSG_VIRTUAL_COPY,
		/* pad2 = */		0,
		/* type = */		MACH_MSG_OOL_DESCRIPTOR,
	};
#endif	/* UseStaticTemplates */

	kern_return_t RetCode;
	__DeclareRcvRpc(33007, "crlFetch")
	__BeforeRcvRpc(33007, "crlFetch")

#if	defined(__MIG_check__Request__crlFetch_t__defined)
	check_result = __MIG_check__Request__crlFetch_t((__Request *)In0P);
	if (check_result != MACH_MSG_SUCCESS)
		{ MIG_RETURN_ERROR(OutP, check_result); }
#endif	/* defined(__MIG_check__Request__crlFetch_t__defined) */

	TrailerP = (mach_msg_max_trailer_t *)((vm_offset_t)In0P +
		round_msg(In0P->Head.msgh_size));
	if (TrailerP->msgh_trailer_type != MACH_MSG_TRAILER_FORMAT_0)
		{ MIG_RETURN_ERROR(In0P, MIG_TRAILER_ERROR); }
#if	__MigTypeCheck
	trailer_size = TrailerP->msgh_trailer_size -
		(mach_msg_size_t)(sizeof(mach_msg_trailer_type_t) - sizeof(mach_msg_trailer_size_t));
#endif	/* __MigTypeCheck */
#if	__MigTypeCheck
	if (trailer_size < (mach_msg_size_t)sizeof(audit_token_t))
		{ MIG_RETURN_ERROR(OutP, MIG_TRAILER_ERROR); }
	trailer_size -= (mach_msg_size_t)sizeof(audit_token_t);
#endif	/* __MigTypeCheck */
#if	UseStaticTemplates
	OutP->crl_data = crl_dataTemplate;
#else	/* UseStaticTemplates */
	OutP->crl_data.deallocate =  FALSE;
	OutP->crl_data.copy = MACH_MSG_VIRTUAL_COPY;
	OutP->crl_data.pad1 = 0;
	OutP->crl_data.type = MACH_MSG_OOL_DESCRIPTOR;
#if defined(KERNEL) && !defined(__LP64__)
	OutP->crl_data.pad_end = 0;
#endif
#endif	/* UseStaticTemplates */


	OutP->crl_dataCnt = 0;

	RetCode = ocsp_server_crlFetch(In0P->Head.msgh_request_port, TrailerP->msgh_audit, (Data)(In0P->crl_url.address), In0P->crl_url.size, (Data)(In0P->crl_issuer.address), In0P->crl_issuer.size, In0P->cache_read, In0P->cache_write, (Data)(In0P->verify_time.address), In0P->verify_time.size, (Data *)&(OutP->crl_data.address), &OutP->crl_dataCnt);
	mig_deallocate((vm_offset_t) In0P->verify_time.address, In0P->verify_time.size);
	In0P->verify_time.address = (void *) 0;
	In0P->verify_time.size = (mach_msg_size_t) 0;
	mig_deallocate((vm_offset_t) In0P->crl_issuer.address, In0P->crl_issuer.size);
	In0P->crl_issuer.address = (void *) 0;
	In0P->crl_issuer.size = (mach_msg_size_t) 0;
	mig_deallocate((vm_offset_t) In0P->crl_url.address, In0P->crl_url.size);
	In0P->crl_url.address = (void *) 0;
	In0P->crl_url.size = (mach_msg_size_t) 0;
	if (RetCode != KERN_SUCCESS) {
		MIG_RETURN_ERROR(OutP, RetCode);
	}
	OutP->crl_data.size = OutP->crl_dataCnt;


	OutP->NDR = NDR_record;


	OutP->Head.msgh_bits |= MACH_MSGH_BITS_COMPLEX;
	OutP->Head.msgh_size = (mach_msg_size_t)(sizeof(Reply));
	OutP->msgh_body.msgh_descriptor_count = 1;
	__AfterRcvRpc(33007, "crlFetch")
}

#if ( __MigTypeCheck )
#if __MIG_check__Request__ocspd_subsystem__
#if !defined(__MIG_check__Request__crlRefresh_t__defined)
#define __MIG_check__Request__crlRefresh_t__defined

mig_internal kern_return_t __MIG_check__Request__crlRefresh_t(__attribute__((__unused__)) __Request__crlRefresh_t *In0P)
{

	typedef __Request__crlRefresh_t __Request;
#if	__MigTypeCheck
	if ((In0P->Head.msgh_bits & MACH_MSGH_BITS_COMPLEX) ||
	    (In0P->Head.msgh_size != (mach_msg_size_t)sizeof(__Request)))
		return MIG_BAD_ARGUMENTS;
#endif	/* __MigTypeCheck */

	return MACH_MSG_SUCCESS;
}
#endif /* !defined(__MIG_check__Request__crlRefresh_t__defined) */
#endif /* __MIG_check__Request__ocspd_subsystem__ */
#endif /* ( __MigTypeCheck ) */


/* Routine crlRefresh */
#ifdef	mig_external
mig_external
#else
extern
#endif	/* mig_external */
kern_return_t ocsp_server_crlRefresh
(
	mach_port_t serverport,
	uint32_t stale_days,
	uint32_t expire_overlap_seconds,
	boolean_t purge_all,
	boolean_t full_crypto_verify
);

/* Routine crlRefresh */
mig_internal novalue _XcrlRefresh
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP)
{

#ifdef  __MigPackStructs
#pragma pack(4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		NDR_record_t NDR;
		uint32_t stale_days;
		uint32_t expire_overlap_seconds;
		boolean_t purge_all;
		boolean_t full_crypto_verify;
		mach_msg_trailer_t trailer;
	} Request __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack()
#endif
	typedef __Request__crlRefresh_t __Request;
	typedef __Reply__crlRefresh_t Reply __attribute__((unused));

	/*
	 * typedef struct {
	 * 	mach_msg_header_t Head;
	 * 	NDR_record_t NDR;
	 * 	kern_return_t RetCode;
	 * } mig_reply_error_t;
	 */

	Request *In0P = (Request *) InHeadP;
	Reply *OutP = (Reply *) OutHeadP;
#ifdef	__MIG_check__Request__crlRefresh_t__defined
	kern_return_t check_result;
#endif	/* __MIG_check__Request__crlRefresh_t__defined */

	__DeclareRcvRpc(33008, "crlRefresh")
	__BeforeRcvRpc(33008, "crlRefresh")

#if	defined(__MIG_check__Request__crlRefresh_t__defined)
	check_result = __MIG_check__Request__crlRefresh_t((__Request *)In0P);
	if (check_result != MACH_MSG_SUCCESS)
		{ MIG_RETURN_ERROR(OutP, check_result); }
#endif	/* defined(__MIG_check__Request__crlRefresh_t__defined) */

	OutP->RetCode = ocsp_server_crlRefresh(In0P->Head.msgh_request_port, In0P->stale_days, In0P->expire_overlap_seconds, In0P->purge_all, In0P->full_crypto_verify);

	OutP->NDR = NDR_record;


	__AfterRcvRpc(33008, "crlRefresh")
}

#if ( __MigTypeCheck )
#if __MIG_check__Request__ocspd_subsystem__
#if !defined(__MIG_check__Request__crlFlush_t__defined)
#define __MIG_check__Request__crlFlush_t__defined

mig_internal kern_return_t __MIG_check__Request__crlFlush_t(__attribute__((__unused__)) __Request__crlFlush_t *In0P)
{

	typedef __Request__crlFlush_t __Request;
#if	__MigTypeCheck
	if (!(In0P->Head.msgh_bits & MACH_MSGH_BITS_COMPLEX) ||
	    (In0P->msgh_body.msgh_descriptor_count != 1) ||
	    (In0P->Head.msgh_size != (mach_msg_size_t)sizeof(__Request)))
		return MIG_BAD_ARGUMENTS;
#endif	/* __MigTypeCheck */

#if	__MigTypeCheck
	if (In0P->cert_url.type != MACH_MSG_OOL_DESCRIPTOR)
		return MIG_TYPE_ERROR;
#endif	/* __MigTypeCheck */

#if __MigTypeCheck
	if (In0P->cert_url.size != In0P->cert_urlCnt)
		return MIG_TYPE_ERROR;
#endif	/* __MigTypeCheck */

	return MACH_MSG_SUCCESS;
}
#endif /* !defined(__MIG_check__Request__crlFlush_t__defined) */
#endif /* __MIG_check__Request__ocspd_subsystem__ */
#endif /* ( __MigTypeCheck ) */


/* Routine crlFlush */
#ifdef	mig_external
mig_external
#else
extern
#endif	/* mig_external */
kern_return_t ocsp_server_crlFlush
(
	mach_port_t serverport,
	Data cert_url,
	mach_msg_type_number_t cert_urlCnt
);

/* Routine crlFlush */
mig_internal novalue _XcrlFlush
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP)
{

#ifdef  __MigPackStructs
#pragma pack(4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		/* start of the kernel processed data */
		mach_msg_body_t msgh_body;
		mach_msg_ool_descriptor_t cert_url;
		/* end of the kernel processed data */
		NDR_record_t NDR;
		mach_msg_type_number_t cert_urlCnt;
		mach_msg_trailer_t trailer;
	} Request __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack()
#endif
	typedef __Request__crlFlush_t __Request;
	typedef __Reply__crlFlush_t Reply __attribute__((unused));

	/*
	 * typedef struct {
	 * 	mach_msg_header_t Head;
	 * 	NDR_record_t NDR;
	 * 	kern_return_t RetCode;
	 * } mig_reply_error_t;
	 */

	Request *In0P = (Request *) InHeadP;
	Reply *OutP = (Reply *) OutHeadP;
#ifdef	__MIG_check__Request__crlFlush_t__defined
	kern_return_t check_result;
#endif	/* __MIG_check__Request__crlFlush_t__defined */

	__DeclareRcvRpc(33009, "crlFlush")
	__BeforeRcvRpc(33009, "crlFlush")

#if	defined(__MIG_check__Request__crlFlush_t__defined)
	check_result = __MIG_check__Request__crlFlush_t((__Request *)In0P);
	if (check_result != MACH_MSG_SUCCESS)
		{ MIG_RETURN_ERROR(OutP, check_result); }
#endif	/* defined(__MIG_check__Request__crlFlush_t__defined) */

	OutP->RetCode = ocsp_server_crlFlush(In0P->Head.msgh_request_port, (Data)(In0P->cert_url.address), In0P->cert_url.size);
	mig_deallocate((vm_offset_t) In0P->cert_url.address, In0P->cert_url.size);
	In0P->cert_url.address = (void *) 0;
	In0P->cert_url.size = (mach_msg_size_t) 0;

	OutP->NDR = NDR_record;


	__AfterRcvRpc(33009, "crlFlush")
}

#if ( __MigTypeCheck )
#if __MIG_check__Request__ocspd_subsystem__
#if !defined(__MIG_check__Request__trustSettingsRead_t__defined)
#define __MIG_check__Request__trustSettingsRead_t__defined

mig_internal kern_return_t __MIG_check__Request__trustSettingsRead_t(__attribute__((__unused__)) __Request__trustSettingsRead_t *In0P)
{

	typedef __Request__trustSettingsRead_t __Request;
#if	__MigTypeCheck
	if ((In0P->Head.msgh_bits & MACH_MSGH_BITS_COMPLEX) ||
	    (In0P->Head.msgh_size != (mach_msg_size_t)sizeof(__Request)))
		return MIG_BAD_ARGUMENTS;
#endif	/* __MigTypeCheck */

	return MACH_MSG_SUCCESS;
}
#endif /* !defined(__MIG_check__Request__trustSettingsRead_t__defined) */
#endif /* __MIG_check__Request__ocspd_subsystem__ */
#endif /* ( __MigTypeCheck ) */


/* Routine trustSettingsRead */
#ifdef	mig_external
mig_external
#else
extern
#endif	/* mig_external */
kern_return_t ocsp_server_trustSettingsRead
(
	mach_port_t serverport,
	audit_token_t sourceAudit,
	uint32_t domain,
	Data *trustSettings,
	mach_msg_type_number_t *trustSettingsCnt,
	OSStatus *rcode
);

/* Routine trustSettingsRead */
mig_internal novalue _XtrustSettingsRead
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP)
{

#ifdef  __MigPackStructs
#pragma pack(4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		NDR_record_t NDR;
		uint32_t domain;
		mach_msg_max_trailer_t trailer;
	} Request __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack()
#endif
	typedef __Request__trustSettingsRead_t __Request;
	typedef __Reply__trustSettingsRead_t Reply __attribute__((unused));

	/*
	 * typedef struct {
	 * 	mach_msg_header_t Head;
	 * 	NDR_record_t NDR;
	 * 	kern_return_t RetCode;
	 * } mig_reply_error_t;
	 */

	Request *In0P = (Request *) InHeadP;
	Reply *OutP = (Reply *) OutHeadP;
	mach_msg_max_trailer_t *TrailerP;
#if	__MigTypeCheck
	unsigned int trailer_size;
#endif	/* __MigTypeCheck */
#ifdef	__MIG_check__Request__trustSettingsRead_t__defined
	kern_return_t check_result;
#endif	/* __MIG_check__Request__trustSettingsRead_t__defined */

#if	UseStaticTemplates
	const static mach_msg_ool_descriptor_t trustSettingsTemplate = {
		/* addr = */		(void *)0,
		/* size = */		0,
		/* deal = */		FALSE,
		/* copy = */		MACH_MSG_VIRTUAL_COPY,
		/* pad2 = */		0,
		/* type = */		MACH_MSG_OOL_DESCRIPTOR,
	};
#endif	/* UseStaticTemplates */

	kern_return_t RetCode;
	__DeclareRcvRpc(33010, "trustSettingsRead")
	__BeforeRcvRpc(33010, "trustSettingsRead")

#if	defined(__MIG_check__Request__trustSettingsRead_t__defined)
	check_result = __MIG_check__Request__trustSettingsRead_t((__Request *)In0P);
	if (check_result != MACH_MSG_SUCCESS)
		{ MIG_RETURN_ERROR(OutP, check_result); }
#endif	/* defined(__MIG_check__Request__trustSettingsRead_t__defined) */

	TrailerP = (mach_msg_max_trailer_t *)((vm_offset_t)In0P +
		round_msg(In0P->Head.msgh_size));
	if (TrailerP->msgh_trailer_type != MACH_MSG_TRAILER_FORMAT_0)
		{ MIG_RETURN_ERROR(In0P, MIG_TRAILER_ERROR); }
#if	__MigTypeCheck
	trailer_size = TrailerP->msgh_trailer_size -
		(mach_msg_size_t)(sizeof(mach_msg_trailer_type_t) - sizeof(mach_msg_trailer_size_t));
#endif	/* __MigTypeCheck */
#if	__MigTypeCheck
	if (trailer_size < (mach_msg_size_t)sizeof(audit_token_t))
		{ MIG_RETURN_ERROR(OutP, MIG_TRAILER_ERROR); }
	trailer_size -= (mach_msg_size_t)sizeof(audit_token_t);
#endif	/* __MigTypeCheck */
#if	UseStaticTemplates
	OutP->trustSettings = trustSettingsTemplate;
#else	/* UseStaticTemplates */
	OutP->trustSettings.deallocate =  FALSE;
	OutP->trustSettings.copy = MACH_MSG_VIRTUAL_COPY;
	OutP->trustSettings.pad1 = 0;
	OutP->trustSettings.type = MACH_MSG_OOL_DESCRIPTOR;
#if defined(KERNEL) && !defined(__LP64__)
	OutP->trustSettings.pad_end = 0;
#endif
#endif	/* UseStaticTemplates */


	OutP->trustSettingsCnt = 0;

	RetCode = ocsp_server_trustSettingsRead(In0P->Head.msgh_request_port, TrailerP->msgh_audit, In0P->domain, (Data *)&(OutP->trustSettings.address), &OutP->trustSettingsCnt, &OutP->rcode);
	if (RetCode != KERN_SUCCESS) {
		MIG_RETURN_ERROR(OutP, RetCode);
	}
	OutP->trustSettings.size = OutP->trustSettingsCnt;


	OutP->NDR = NDR_record;


	OutP->Head.msgh_bits |= MACH_MSGH_BITS_COMPLEX;
	OutP->Head.msgh_size = (mach_msg_size_t)(sizeof(Reply));
	OutP->msgh_body.msgh_descriptor_count = 1;
	__AfterRcvRpc(33010, "trustSettingsRead")
}

#if ( __MigTypeCheck )
#if __MIG_check__Request__ocspd_subsystem__
#if !defined(__MIG_check__Request__trustSettingsWrite_t__defined)
#define __MIG_check__Request__trustSettingsWrite_t__defined

mig_internal kern_return_t __MIG_check__Request__trustSettingsWrite_t(__attribute__((__unused__)) __Request__trustSettingsWrite_t *In0P)
{

	typedef __Request__trustSettingsWrite_t __Request;
#if	__MigTypeCheck
	if (!(In0P->Head.msgh_bits & MACH_MSGH_BITS_COMPLEX) ||
	    (In0P->msgh_body.msgh_descriptor_count != 3) ||
	    (In0P->Head.msgh_size != (mach_msg_size_t)sizeof(__Request)))
		return MIG_BAD_ARGUMENTS;
#endif	/* __MigTypeCheck */

#if	__MigTypeCheck
	if (In0P->clientport.type != MACH_MSG_PORT_DESCRIPTOR ||
	    In0P->clientport.disposition != 17)
		return MIG_TYPE_ERROR;
#endif	/* __MigTypeCheck */

#if	__MigTypeCheck
	if (In0P->authBlob.type != MACH_MSG_OOL_DESCRIPTOR)
		return MIG_TYPE_ERROR;
#endif	/* __MigTypeCheck */

#if	__MigTypeCheck
	if (In0P->trustSettings.type != MACH_MSG_OOL_DESCRIPTOR)
		return MIG_TYPE_ERROR;
#endif	/* __MigTypeCheck */

#if __MigTypeCheck
	if (In0P->authBlob.size != In0P->authBlobCnt)
		return MIG_TYPE_ERROR;
	if (In0P->trustSettings.size != In0P->trustSettingsCnt)
		return MIG_TYPE_ERROR;
#endif	/* __MigTypeCheck */

	return MACH_MSG_SUCCESS;
}
#endif /* !defined(__MIG_check__Request__trustSettingsWrite_t__defined) */
#endif /* __MIG_check__Request__ocspd_subsystem__ */
#endif /* ( __MigTypeCheck ) */


/* Routine trustSettingsWrite */
#ifdef	mig_external
mig_external
#else
extern
#endif	/* mig_external */
kern_return_t ocsp_server_trustSettingsWrite
(
	mach_port_t serverport,
	audit_token_t sourceAudit,
	mach_port_t clientport,
	uint32_t domain,
	Data authBlob,
	mach_msg_type_number_t authBlobCnt,
	Data trustSettings,
	mach_msg_type_number_t trustSettingsCnt,
	OSStatus *rcode
);

/* Routine trustSettingsWrite */
mig_internal novalue _XtrustSettingsWrite
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP)
{

#ifdef  __MigPackStructs
#pragma pack(4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		/* start of the kernel processed data */
		mach_msg_body_t msgh_body;
		mach_msg_port_descriptor_t clientport;
		mach_msg_ool_descriptor_t authBlob;
		mach_msg_ool_descriptor_t trustSettings;
		/* end of the kernel processed data */
		NDR_record_t NDR;
		uint32_t domain;
		mach_msg_type_number_t authBlobCnt;
		mach_msg_type_number_t trustSettingsCnt;
		mach_msg_max_trailer_t trailer;
	} Request __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack()
#endif
	typedef __Request__trustSettingsWrite_t __Request;
	typedef __Reply__trustSettingsWrite_t Reply __attribute__((unused));

	/*
	 * typedef struct {
	 * 	mach_msg_header_t Head;
	 * 	NDR_record_t NDR;
	 * 	kern_return_t RetCode;
	 * } mig_reply_error_t;
	 */

	Request *In0P = (Request *) InHeadP;
	Reply *OutP = (Reply *) OutHeadP;
	mach_msg_max_trailer_t *TrailerP;
#if	__MigTypeCheck
	unsigned int trailer_size;
#endif	/* __MigTypeCheck */
#ifdef	__MIG_check__Request__trustSettingsWrite_t__defined
	kern_return_t check_result;
#endif	/* __MIG_check__Request__trustSettingsWrite_t__defined */

	__DeclareRcvRpc(33011, "trustSettingsWrite")
	__BeforeRcvRpc(33011, "trustSettingsWrite")

#if	defined(__MIG_check__Request__trustSettingsWrite_t__defined)
	check_result = __MIG_check__Request__trustSettingsWrite_t((__Request *)In0P);
	if (check_result != MACH_MSG_SUCCESS)
		{ MIG_RETURN_ERROR(OutP, check_result); }
#endif	/* defined(__MIG_check__Request__trustSettingsWrite_t__defined) */

	TrailerP = (mach_msg_max_trailer_t *)((vm_offset_t)In0P +
		round_msg(In0P->Head.msgh_size));
	if (TrailerP->msgh_trailer_type != MACH_MSG_TRAILER_FORMAT_0)
		{ MIG_RETURN_ERROR(In0P, MIG_TRAILER_ERROR); }
#if	__MigTypeCheck
	trailer_size = TrailerP->msgh_trailer_size -
		(mach_msg_size_t)(sizeof(mach_msg_trailer_type_t) - sizeof(mach_msg_trailer_size_t));
#endif	/* __MigTypeCheck */
#if	__MigTypeCheck
	if (trailer_size < (mach_msg_size_t)sizeof(audit_token_t))
		{ MIG_RETURN_ERROR(OutP, MIG_TRAILER_ERROR); }
	trailer_size -= (mach_msg_size_t)sizeof(audit_token_t);
#endif	/* __MigTypeCheck */
	OutP->RetCode = ocsp_server_trustSettingsWrite(In0P->Head.msgh_request_port, TrailerP->msgh_audit, In0P->clientport.name, In0P->domain, (Data)(In0P->authBlob.address), In0P->authBlob.size, (Data)(In0P->trustSettings.address), In0P->trustSettings.size, &OutP->rcode);
	mig_deallocate((vm_offset_t) In0P->trustSettings.address, In0P->trustSettings.size);
	In0P->trustSettings.address = (void *) 0;
	In0P->trustSettings.size = (mach_msg_size_t) 0;
	mig_deallocate((vm_offset_t) In0P->authBlob.address, In0P->authBlob.size);
	In0P->authBlob.address = (void *) 0;
	In0P->authBlob.size = (mach_msg_size_t) 0;
	if (OutP->RetCode != KERN_SUCCESS) {
		MIG_RETURN_ERROR(OutP, OutP->RetCode);
	}

	OutP->NDR = NDR_record;


	OutP->Head.msgh_size = (mach_msg_size_t)(sizeof(Reply));
	__AfterRcvRpc(33011, "trustSettingsWrite")
}

#if ( __MigTypeCheck )
#if __MIG_check__Request__ocspd_subsystem__
#if !defined(__MIG_check__Request__crlStatus_t__defined)
#define __MIG_check__Request__crlStatus_t__defined

mig_internal kern_return_t __MIG_check__Request__crlStatus_t(__attribute__((__unused__)) __Request__crlStatus_t *In0P)
{

	typedef __Request__crlStatus_t __Request;
#if	__MigTypeCheck
	if (!(In0P->Head.msgh_bits & MACH_MSGH_BITS_COMPLEX) ||
	    (In0P->msgh_body.msgh_descriptor_count != 4) ||
	    (In0P->Head.msgh_size != (mach_msg_size_t)sizeof(__Request)))
		return MIG_BAD_ARGUMENTS;
#endif	/* __MigTypeCheck */

#if	__MigTypeCheck
	if (In0P->serial_number.type != MACH_MSG_OOL_DESCRIPTOR)
		return MIG_TYPE_ERROR;
#endif	/* __MigTypeCheck */

#if	__MigTypeCheck
	if (In0P->cert_issuers.type != MACH_MSG_OOL_DESCRIPTOR)
		return MIG_TYPE_ERROR;
#endif	/* __MigTypeCheck */

#if	__MigTypeCheck
	if (In0P->crl_issuer.type != MACH_MSG_OOL_DESCRIPTOR)
		return MIG_TYPE_ERROR;
#endif	/* __MigTypeCheck */

#if	__MigTypeCheck
	if (In0P->crl_url.type != MACH_MSG_OOL_DESCRIPTOR)
		return MIG_TYPE_ERROR;
#endif	/* __MigTypeCheck */

#if __MigTypeCheck
	if (In0P->serial_number.size != In0P->serial_numberCnt)
		return MIG_TYPE_ERROR;
	if (In0P->cert_issuers.size != In0P->cert_issuersCnt)
		return MIG_TYPE_ERROR;
	if (In0P->crl_issuer.size != In0P->crl_issuerCnt)
		return MIG_TYPE_ERROR;
	if (In0P->crl_url.size != In0P->crl_urlCnt)
		return MIG_TYPE_ERROR;
#endif	/* __MigTypeCheck */

	return MACH_MSG_SUCCESS;
}
#endif /* !defined(__MIG_check__Request__crlStatus_t__defined) */
#endif /* __MIG_check__Request__ocspd_subsystem__ */
#endif /* ( __MigTypeCheck ) */


/* Routine crlStatus */
#ifdef	mig_external
mig_external
#else
extern
#endif	/* mig_external */
kern_return_t ocsp_server_crlStatus
(
	mach_port_t serverport,
	Data serial_number,
	mach_msg_type_number_t serial_numberCnt,
	Data cert_issuers,
	mach_msg_type_number_t cert_issuersCnt,
	Data crl_issuer,
	mach_msg_type_number_t crl_issuerCnt,
	Data crl_url,
	mach_msg_type_number_t crl_urlCnt
);

/* Routine crlStatus */
mig_internal novalue _XcrlStatus
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP)
{

#ifdef  __MigPackStructs
#pragma pack(4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		/* start of the kernel processed data */
		mach_msg_body_t msgh_body;
		mach_msg_ool_descriptor_t serial_number;
		mach_msg_ool_descriptor_t cert_issuers;
		mach_msg_ool_descriptor_t crl_issuer;
		mach_msg_ool_descriptor_t crl_url;
		/* end of the kernel processed data */
		NDR_record_t NDR;
		mach_msg_type_number_t serial_numberCnt;
		mach_msg_type_number_t cert_issuersCnt;
		mach_msg_type_number_t crl_issuerCnt;
		mach_msg_type_number_t crl_urlCnt;
		mach_msg_trailer_t trailer;
	} Request __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack()
#endif
	typedef __Request__crlStatus_t __Request;
	typedef __Reply__crlStatus_t Reply __attribute__((unused));

	/*
	 * typedef struct {
	 * 	mach_msg_header_t Head;
	 * 	NDR_record_t NDR;
	 * 	kern_return_t RetCode;
	 * } mig_reply_error_t;
	 */

	Request *In0P = (Request *) InHeadP;
	Reply *OutP = (Reply *) OutHeadP;
#ifdef	__MIG_check__Request__crlStatus_t__defined
	kern_return_t check_result;
#endif	/* __MIG_check__Request__crlStatus_t__defined */

	__DeclareRcvRpc(33012, "crlStatus")
	__BeforeRcvRpc(33012, "crlStatus")

#if	defined(__MIG_check__Request__crlStatus_t__defined)
	check_result = __MIG_check__Request__crlStatus_t((__Request *)In0P);
	if (check_result != MACH_MSG_SUCCESS)
		{ MIG_RETURN_ERROR(OutP, check_result); }
#endif	/* defined(__MIG_check__Request__crlStatus_t__defined) */

	OutP->RetCode = ocsp_server_crlStatus(In0P->Head.msgh_request_port, (Data)(In0P->serial_number.address), In0P->serial_number.size, (Data)(In0P->cert_issuers.address), In0P->cert_issuers.size, (Data)(In0P->crl_issuer.address), In0P->crl_issuer.size, (Data)(In0P->crl_url.address), In0P->crl_url.size);
	mig_deallocate((vm_offset_t) In0P->crl_url.address, In0P->crl_url.size);
	In0P->crl_url.address = (void *) 0;
	In0P->crl_url.size = (mach_msg_size_t) 0;
	mig_deallocate((vm_offset_t) In0P->crl_issuer.address, In0P->crl_issuer.size);
	In0P->crl_issuer.address = (void *) 0;
	In0P->crl_issuer.size = (mach_msg_size_t) 0;
	mig_deallocate((vm_offset_t) In0P->cert_issuers.address, In0P->cert_issuers.size);
	In0P->cert_issuers.address = (void *) 0;
	In0P->cert_issuers.size = (mach_msg_size_t) 0;
	mig_deallocate((vm_offset_t) In0P->serial_number.address, In0P->serial_number.size);
	In0P->serial_number.address = (void *) 0;
	In0P->serial_number.size = (mach_msg_size_t) 0;

	OutP->NDR = NDR_record;


	__AfterRcvRpc(33012, "crlStatus")
}


#ifdef	mig_external
mig_external
#else
extern
#endif	/* mig_external */
boolean_t ocspd_server(
		mach_msg_header_t *InHeadP,
		mach_msg_header_t *OutHeadP);

#ifdef	mig_external
mig_external
#else
extern
#endif	/* mig_external */
mig_routine_t ocspd_server_routine(
		mach_msg_header_t *InHeadP);


/* Description of this subsystem, for use in direct RPC */
const struct ocsp_server_ocspd_subsystem {
	mig_server_routine_t 	server;	/* Server routine */
	mach_msg_id_t	start;	/* Min routine number */
	mach_msg_id_t	end;	/* Max routine number + 1 */
	unsigned int	maxsize;	/* Max msg size */
	vm_address_t	reserved;	/* Reserved */
	struct routine_descriptor	/*Array of routine descriptors */
		routine[10];
} ocsp_server_ocspd_subsystem = {
	ocspd_server_routine,
	33003,
	33013,
	(mach_msg_size_t)sizeof(union __ReplyUnion__ocsp_server_ocspd_subsystem),
	(vm_address_t)0,
	{
          { (mig_impl_routine_t) 0,
          (mig_stub_routine_t) _XocspdFetch, 13, 0, (routine_arg_descriptor_t)0, (mach_msg_size_t)sizeof(__Reply__ocspdFetch_t)},
          { (mig_impl_routine_t) 0,
          (mig_stub_routine_t) _XocspdCacheFlush, 3, 0, (routine_arg_descriptor_t)0, (mach_msg_size_t)sizeof(__Reply__ocspdCacheFlush_t)},
          { (mig_impl_routine_t) 0,
          (mig_stub_routine_t) _XocspdCacheFlushStale, 1, 0, (routine_arg_descriptor_t)0, (mach_msg_size_t)sizeof(__Reply__ocspdCacheFlushStale_t)},
          { (mig_impl_routine_t) 0,
          (mig_stub_routine_t) _XcertFetch, 13, 0, (routine_arg_descriptor_t)0, (mach_msg_size_t)sizeof(__Reply__certFetch_t)},
          { (mig_impl_routine_t) 0,
          (mig_stub_routine_t) _XcrlFetch, 19, 0, (routine_arg_descriptor_t)0, (mach_msg_size_t)sizeof(__Reply__crlFetch_t)},
          { (mig_impl_routine_t) 0,
          (mig_stub_routine_t) _XcrlRefresh, 5, 0, (routine_arg_descriptor_t)0, (mach_msg_size_t)sizeof(__Reply__crlRefresh_t)},
          { (mig_impl_routine_t) 0,
          (mig_stub_routine_t) _XcrlFlush, 3, 0, (routine_arg_descriptor_t)0, (mach_msg_size_t)sizeof(__Reply__crlFlush_t)},
          { (mig_impl_routine_t) 0,
          (mig_stub_routine_t) _XtrustSettingsRead, 13, 0, (routine_arg_descriptor_t)0, (mach_msg_size_t)sizeof(__Reply__trustSettingsRead_t)},
          { (mig_impl_routine_t) 0,
          (mig_stub_routine_t) _XtrustSettingsWrite, 16, 0, (routine_arg_descriptor_t)0, (mach_msg_size_t)sizeof(__Reply__trustSettingsWrite_t)},
          { (mig_impl_routine_t) 0,
          (mig_stub_routine_t) _XcrlStatus, 9, 0, (routine_arg_descriptor_t)0, (mach_msg_size_t)sizeof(__Reply__crlStatus_t)},
	}
};

mig_external boolean_t ocspd_server
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP)
{
	/*
	 * typedef struct {
	 * 	mach_msg_header_t Head;
	 * 	NDR_record_t NDR;
	 * 	kern_return_t RetCode;
	 * } mig_reply_error_t;
	 */

	register mig_routine_t routine;

	OutHeadP->msgh_bits = MACH_MSGH_BITS(MACH_MSGH_BITS_REPLY(InHeadP->msgh_bits), 0);
	OutHeadP->msgh_remote_port = InHeadP->msgh_reply_port;
	/* Minimal size: routine() will update it if different */
	OutHeadP->msgh_size = (mach_msg_size_t)sizeof(mig_reply_error_t);
	OutHeadP->msgh_local_port = MACH_PORT_NULL;
	OutHeadP->msgh_id = InHeadP->msgh_id + 100;
	OutHeadP->msgh_reserved = 0;

	if ((InHeadP->msgh_id > 33012) || (InHeadP->msgh_id < 33003) ||
	    ((routine = ocsp_server_ocspd_subsystem.routine[InHeadP->msgh_id - 33003].stub_routine) == 0)) {
		((mig_reply_error_t *)OutHeadP)->NDR = NDR_record;
		((mig_reply_error_t *)OutHeadP)->RetCode = MIG_BAD_ID;
		return FALSE;
	}
	(*routine) (InHeadP, OutHeadP);
	return TRUE;
}

mig_external mig_routine_t ocspd_server_routine
	(mach_msg_header_t *InHeadP)
{
	register int msgh_id;

	msgh_id = InHeadP->msgh_id - 33003;

	if ((msgh_id > 9) || (msgh_id < 0))
		return 0;

	return ocsp_server_ocspd_subsystem.routine[msgh_id].stub_routine;
}
