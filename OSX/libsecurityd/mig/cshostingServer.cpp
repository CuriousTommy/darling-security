/*
 * IDENTIFICATION:
 * stub generated Mon Jul  3 19:46:46 2017
 * with a MiG generated by bootstrap_cmds-96.20.2
 * OPTIONS: 
 */

/* Module cshosting */

#define	__MIG_check__Request__cshosting_subsystem__ 1

#include <string.h>
#include <mach/ndr.h>
#include <mach/boolean.h>
#include <mach/kern_return.h>
#include <mach/notify.h>
#include <mach/mach_types.h>
#include <mach/message.h>
#include <mach/mig_errors.h>
#include <mach/port.h>
	
/* BEGIN VOUCHER CODE */

#ifndef KERNEL
#if defined(__has_include)
#if __has_include(<mach/mig_voucher_support.h>)
#ifndef USING_VOUCHERS
#define USING_VOUCHERS
#endif
#ifndef __VOUCHER_FORWARD_TYPE_DECLS__
#define __VOUCHER_FORWARD_TYPE_DECLS__
#ifdef __cplusplus
extern "C" {
#endif
	extern boolean_t voucher_mach_msg_set(mach_msg_header_t *msg) __attribute__((weak_import));
#ifdef __cplusplus
}
#endif
#endif // __VOUCHER_FORWARD_TYPE_DECLS__
#endif // __has_include(<mach/mach_voucher_types.h>)
#endif // __has_include
#endif // !KERNEL
	
/* END VOUCHER CODE */

	
/* BEGIN MIG_STRNCPY_ZEROFILL CODE */

#if defined(__has_include)
#if __has_include(<mach/mig_strncpy_zerofill_support.h>)
#ifndef USING_MIG_STRNCPY_ZEROFILL
#define USING_MIG_STRNCPY_ZEROFILL
#endif
#ifndef __MIG_STRNCPY_ZEROFILL_FORWARD_TYPE_DECLS__
#define __MIG_STRNCPY_ZEROFILL_FORWARD_TYPE_DECLS__
#ifdef __cplusplus
extern "C" {
#endif
	extern int mig_strncpy_zerofill(char *dest, const char *src, int len) __attribute__((weak_import));
#ifdef __cplusplus
}
#endif
#endif /* __MIG_STRNCPY_ZEROFILL_FORWARD_TYPE_DECLS__ */
#endif /* __has_include(<mach/mig_strncpy_zerofill_support.h>) */
#endif /* __has_include */
	
/* END MIG_STRNCPY_ZEROFILL CODE */


#include <mach/std_types.h>
#include <mach/mig.h>
#include <mach/mig.h>
#include <mach/mach_types.h>
#include <securityd_client/ss_types.h>
#include <securityd_client/ucsp_types.h>

#ifndef	mig_internal
#define	mig_internal	static __inline__
#endif	/* mig_internal */

#ifndef	mig_external
#define mig_external
#endif	/* mig_external */

#if	!defined(__MigTypeCheck) && defined(TypeCheck)
#define	__MigTypeCheck		TypeCheck	/* Legacy setting */
#endif	/* !defined(__MigTypeCheck) */

#if	!defined(__MigKernelSpecificCode) && defined(_MIG_KERNEL_SPECIFIC_CODE_)
#define	__MigKernelSpecificCode	_MIG_KERNEL_SPECIFIC_CODE_	/* Legacy setting */
#endif	/* !defined(__MigKernelSpecificCode) */

#ifndef	LimitCheck
#define	LimitCheck 0
#endif	/* LimitCheck */

#ifndef	min
#define	min(a,b)  ( ((a) < (b))? (a): (b) )
#endif	/* min */

#if !defined(_WALIGN_)
#define _WALIGN_(x) (((x) + 3) & ~3)
#endif /* !defined(_WALIGN_) */

#if !defined(_WALIGNSZ_)
#define _WALIGNSZ_(x) _WALIGN_(sizeof(x))
#endif /* !defined(_WALIGNSZ_) */

#ifndef	UseStaticTemplates
#define	UseStaticTemplates	0
#endif	/* UseStaticTemplates */

#ifndef	__DeclareRcvRpc
#define	__DeclareRcvRpc(_NUM_, _NAME_)
#endif	/* __DeclareRcvRpc */

#ifndef	__BeforeRcvRpc
#define	__BeforeRcvRpc(_NUM_, _NAME_)
#endif	/* __BeforeRcvRpc */

#ifndef	__AfterRcvRpc
#define	__AfterRcvRpc(_NUM_, _NAME_)
#endif	/* __AfterRcvRpc */

#ifndef	__DeclareRcvSimple
#define	__DeclareRcvSimple(_NUM_, _NAME_)
#endif	/* __DeclareRcvSimple */

#ifndef	__BeforeRcvSimple
#define	__BeforeRcvSimple(_NUM_, _NAME_)
#endif	/* __BeforeRcvSimple */

#ifndef	__AfterRcvSimple
#define	__AfterRcvSimple(_NUM_, _NAME_)
#endif	/* __AfterRcvSimple */

#define novalue void

#define msgh_request_port	msgh_local_port
#define MACH_MSGH_BITS_REQUEST(bits)	MACH_MSGH_BITS_LOCAL(bits)
#define msgh_reply_port		msgh_remote_port
#define MACH_MSGH_BITS_REPLY(bits)	MACH_MSGH_BITS_REMOTE(bits)

#define MIG_RETURN_ERROR(X, code)	{\
				((mig_reply_error_t *)X)->RetCode = code;\
				((mig_reply_error_t *)X)->NDR = NDR_record;\
				return;\
				}

/* typedefs for all requests */

#ifndef __Request__cshosting_subsystem__defined
#define __Request__cshosting_subsystem__defined

#ifdef  __MigPackStructs
#pragma pack(4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		/* start of the kernel processed data */
		mach_msg_body_t msgh_body;
		mach_msg_ool_descriptor_t attributes;
		/* end of the kernel processed data */
		NDR_record_t NDR;
		SecGuestRef host;
		mach_msg_type_number_t attributesCnt;
	} __Request__findGuest_t __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack()
#endif

#ifdef  __MigPackStructs
#pragma pack(4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		NDR_record_t NDR;
		SecGuestRef guest;
	} __Request__guestStatus_t __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack()
#endif

#ifdef  __MigPackStructs
#pragma pack(4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		NDR_record_t NDR;
		SecGuestRef guest;
	} __Request__identifyGuest_t __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack()
#endif
#endif /* !__Request__cshosting_subsystem__defined */

/* typedefs for all replies */

#ifndef __Reply__cshosting_subsystem__defined
#define __Reply__cshosting_subsystem__defined

#ifdef  __MigPackStructs
#pragma pack(4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		/* start of the kernel processed data */
		mach_msg_body_t msgh_body;
		mach_msg_ool_descriptor_t guest;
		mach_msg_port_descriptor_t subhost;
		/* end of the kernel processed data */
		NDR_record_t NDR;
		OSStatus rcode;
		mach_msg_type_number_t guestCnt;
	} __Reply__findGuest_t __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack()
#endif

#ifdef  __MigPackStructs
#pragma pack(4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		NDR_record_t NDR;
		kern_return_t RetCode;
		OSStatus rcode;
		uint32 status;
	} __Reply__guestStatus_t __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack()
#endif

#ifdef  __MigPackStructs
#pragma pack(4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		/* start of the kernel processed data */
		mach_msg_body_t msgh_body;
		mach_msg_ool_descriptor_t attributes;
		/* end of the kernel processed data */
		NDR_record_t NDR;
		OSStatus rcode;
		mach_msg_type_number_t pathOffset; /* MiG doesn't use it */
		mach_msg_type_number_t pathCnt;
		char path[1024];
		HashDataOut cdhash;
		uint32 hashLength;
		mach_msg_type_number_t attributesCnt;
	} __Reply__identifyGuest_t __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack()
#endif
#endif /* !__Reply__cshosting_subsystem__defined */


/* union of all replies */

#ifndef __ReplyUnion__cshosting_server_cshosting_subsystem__defined
#define __ReplyUnion__cshosting_server_cshosting_subsystem__defined
union __ReplyUnion__cshosting_server_cshosting_subsystem {
	__Reply__findGuest_t Reply_findGuest;
	__Reply__guestStatus_t Reply_guestStatus;
	__Reply__identifyGuest_t Reply_identifyGuest;
};
#endif /* __RequestUnion__cshosting_server_cshosting_subsystem__defined */
/* Forward Declarations */


mig_internal novalue _XfindGuest
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP);

mig_internal novalue _XguestStatus
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP);

mig_internal novalue _XidentifyGuest
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP);


#if ( __MigTypeCheck )
#if __MIG_check__Request__cshosting_subsystem__
#if !defined(__MIG_check__Request__findGuest_t__defined)
#define __MIG_check__Request__findGuest_t__defined

mig_internal kern_return_t __MIG_check__Request__findGuest_t(__attribute__((__unused__)) __Request__findGuest_t *In0P)
{

	typedef __Request__findGuest_t __Request;
#if	__MigTypeCheck
	if (!(In0P->Head.msgh_bits & MACH_MSGH_BITS_COMPLEX) ||
	    (In0P->msgh_body.msgh_descriptor_count != 1) ||
	    (In0P->Head.msgh_size != (mach_msg_size_t)sizeof(__Request)))
		return MIG_BAD_ARGUMENTS;
#endif	/* __MigTypeCheck */

#if	__MigTypeCheck
	if (In0P->attributes.type != MACH_MSG_OOL_DESCRIPTOR)
		return MIG_TYPE_ERROR;
#endif	/* __MigTypeCheck */

#if __MigTypeCheck
	if (In0P->attributes.size != In0P->attributesCnt)
		return MIG_TYPE_ERROR;
#endif	/* __MigTypeCheck */

	return MACH_MSG_SUCCESS;
}
#endif /* !defined(__MIG_check__Request__findGuest_t__defined) */
#endif /* __MIG_check__Request__cshosting_subsystem__ */
#endif /* ( __MigTypeCheck ) */


/* Routine findGuest */
#ifdef	mig_external
mig_external
#else
extern
#endif	/* mig_external */
kern_return_t cshosting_server_findGuest
(
	mach_port_t sport,
	mach_port_t rport,
	OSStatus *rcode,
	SecGuestRef host,
	XMLBlob attributes,
	mach_msg_type_number_t attributesCnt,
	GuestChain *guest,
	mach_msg_type_number_t *guestCnt,
	mach_port_t *subhost
);

/* Routine findGuest */
mig_internal novalue _XfindGuest
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP)
{

#ifdef  __MigPackStructs
#pragma pack(4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		/* start of the kernel processed data */
		mach_msg_body_t msgh_body;
		mach_msg_ool_descriptor_t attributes;
		/* end of the kernel processed data */
		NDR_record_t NDR;
		SecGuestRef host;
		mach_msg_type_number_t attributesCnt;
		mach_msg_trailer_t trailer;
	} Request __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack()
#endif
	typedef __Request__findGuest_t __Request;
	typedef __Reply__findGuest_t Reply __attribute__((unused));

	/*
	 * typedef struct {
	 * 	mach_msg_header_t Head;
	 * 	NDR_record_t NDR;
	 * 	kern_return_t RetCode;
	 * } mig_reply_error_t;
	 */

	Request *In0P = (Request *) InHeadP;
	Reply *OutP = (Reply *) OutHeadP;
#ifdef	__MIG_check__Request__findGuest_t__defined
	kern_return_t check_result;
#endif	/* __MIG_check__Request__findGuest_t__defined */

#if	UseStaticTemplates
	const static mach_msg_ool_descriptor_t guestTemplate = {
		/* addr = */		(void *)0,
		/* size = */		0,
		/* deal = */		FALSE,
		/* copy = */		MACH_MSG_VIRTUAL_COPY,
		/* pad2 = */		0,
		/* type = */		MACH_MSG_OOL_DESCRIPTOR,
	};
#endif	/* UseStaticTemplates */

#if	UseStaticTemplates
	const static mach_msg_port_descriptor_t subhostTemplate = {
		/* name = */		MACH_PORT_NULL,
		/* pad1 = */		0,
		/* pad2 = */		0,
		/* disp = */		20,
		/* type = */		MACH_MSG_PORT_DESCRIPTOR,
	};
#endif	/* UseStaticTemplates */

	kern_return_t RetCode;
	__DeclareRcvRpc(20000, "findGuest")
	__BeforeRcvRpc(20000, "findGuest")

#if	defined(__MIG_check__Request__findGuest_t__defined)
	check_result = __MIG_check__Request__findGuest_t((__Request *)In0P);
	if (check_result != MACH_MSG_SUCCESS)
		{ MIG_RETURN_ERROR(OutP, check_result); }
#endif	/* defined(__MIG_check__Request__findGuest_t__defined) */

#if	UseStaticTemplates
	OutP->guest = guestTemplate;
#else	/* UseStaticTemplates */
	OutP->guest.deallocate =  FALSE;
	OutP->guest.copy = MACH_MSG_VIRTUAL_COPY;
	OutP->guest.pad1 = 0;
	OutP->guest.type = MACH_MSG_OOL_DESCRIPTOR;
#if defined(KERNEL) && !defined(__LP64__)
	OutP->guest.pad_end = 0;
#endif
#endif	/* UseStaticTemplates */


#if	UseStaticTemplates
	OutP->subhost = subhostTemplate;
#else	/* UseStaticTemplates */
	OutP->subhost.disposition = 20;
#if !(defined(KERNEL) && defined(__LP64__))
	OutP->subhost.pad1 = 0;
#endif
	OutP->subhost.pad2 = 0;
	OutP->subhost.type = MACH_MSG_PORT_DESCRIPTOR;
#if defined(KERNEL)
	OutP->subhost.pad_end = 0;
#endif
#endif	/* UseStaticTemplates */


	OutP->guestCnt = 0;

	RetCode = cshosting_server_findGuest(In0P->Head.msgh_request_port, In0P->Head.msgh_reply_port, &OutP->rcode, In0P->host, (XMLBlob)(In0P->attributes.address), In0P->attributes.size, (GuestChain *)&(OutP->guest.address), &OutP->guestCnt, &OutP->subhost.name);
	mig_deallocate((vm_offset_t) In0P->attributes.address, In0P->attributes.size);
	In0P->attributes.address = (void *) 0;
	In0P->attributes.size = (mach_msg_size_t) 0;
	if (RetCode != KERN_SUCCESS) {
		MIG_RETURN_ERROR(OutP, RetCode);
	}
	OutP->guest.size = OutP->guestCnt * 4;


	OutP->NDR = NDR_record;


	OutP->Head.msgh_bits |= MACH_MSGH_BITS_COMPLEX;
	OutP->Head.msgh_size = (mach_msg_size_t)(sizeof(Reply));
	OutP->msgh_body.msgh_descriptor_count = 2;
	__AfterRcvRpc(20000, "findGuest")
}

#if ( __MigTypeCheck )
#if __MIG_check__Request__cshosting_subsystem__
#if !defined(__MIG_check__Request__guestStatus_t__defined)
#define __MIG_check__Request__guestStatus_t__defined

mig_internal kern_return_t __MIG_check__Request__guestStatus_t(__attribute__((__unused__)) __Request__guestStatus_t *In0P)
{

	typedef __Request__guestStatus_t __Request;
#if	__MigTypeCheck
	if ((In0P->Head.msgh_bits & MACH_MSGH_BITS_COMPLEX) ||
	    (In0P->Head.msgh_size != (mach_msg_size_t)sizeof(__Request)))
		return MIG_BAD_ARGUMENTS;
#endif	/* __MigTypeCheck */

	return MACH_MSG_SUCCESS;
}
#endif /* !defined(__MIG_check__Request__guestStatus_t__defined) */
#endif /* __MIG_check__Request__cshosting_subsystem__ */
#endif /* ( __MigTypeCheck ) */


/* Routine guestStatus */
#ifdef	mig_external
mig_external
#else
extern
#endif	/* mig_external */
kern_return_t cshosting_server_guestStatus
(
	mach_port_t sport,
	mach_port_t rport,
	OSStatus *rcode,
	SecGuestRef guest,
	uint32 *status
);

/* Routine guestStatus */
mig_internal novalue _XguestStatus
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP)
{

#ifdef  __MigPackStructs
#pragma pack(4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		NDR_record_t NDR;
		SecGuestRef guest;
		mach_msg_trailer_t trailer;
	} Request __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack()
#endif
	typedef __Request__guestStatus_t __Request;
	typedef __Reply__guestStatus_t Reply __attribute__((unused));

	/*
	 * typedef struct {
	 * 	mach_msg_header_t Head;
	 * 	NDR_record_t NDR;
	 * 	kern_return_t RetCode;
	 * } mig_reply_error_t;
	 */

	Request *In0P = (Request *) InHeadP;
	Reply *OutP = (Reply *) OutHeadP;
#ifdef	__MIG_check__Request__guestStatus_t__defined
	kern_return_t check_result;
#endif	/* __MIG_check__Request__guestStatus_t__defined */

	__DeclareRcvRpc(20001, "guestStatus")
	__BeforeRcvRpc(20001, "guestStatus")

#if	defined(__MIG_check__Request__guestStatus_t__defined)
	check_result = __MIG_check__Request__guestStatus_t((__Request *)In0P);
	if (check_result != MACH_MSG_SUCCESS)
		{ MIG_RETURN_ERROR(OutP, check_result); }
#endif	/* defined(__MIG_check__Request__guestStatus_t__defined) */

	OutP->RetCode = cshosting_server_guestStatus(In0P->Head.msgh_request_port, In0P->Head.msgh_reply_port, &OutP->rcode, In0P->guest, &OutP->status);
	if (OutP->RetCode != KERN_SUCCESS) {
		MIG_RETURN_ERROR(OutP, OutP->RetCode);
	}

	OutP->NDR = NDR_record;


	OutP->Head.msgh_size = (mach_msg_size_t)(sizeof(Reply));
	__AfterRcvRpc(20001, "guestStatus")
}

#if ( __MigTypeCheck )
#if __MIG_check__Request__cshosting_subsystem__
#if !defined(__MIG_check__Request__identifyGuest_t__defined)
#define __MIG_check__Request__identifyGuest_t__defined

mig_internal kern_return_t __MIG_check__Request__identifyGuest_t(__attribute__((__unused__)) __Request__identifyGuest_t *In0P)
{

	typedef __Request__identifyGuest_t __Request;
#if	__MigTypeCheck
	if ((In0P->Head.msgh_bits & MACH_MSGH_BITS_COMPLEX) ||
	    (In0P->Head.msgh_size != (mach_msg_size_t)sizeof(__Request)))
		return MIG_BAD_ARGUMENTS;
#endif	/* __MigTypeCheck */

	return MACH_MSG_SUCCESS;
}
#endif /* !defined(__MIG_check__Request__identifyGuest_t__defined) */
#endif /* __MIG_check__Request__cshosting_subsystem__ */
#endif /* ( __MigTypeCheck ) */


/* Routine identifyGuest */
#ifdef	mig_external
mig_external
#else
extern
#endif	/* mig_external */
kern_return_t cshosting_server_identifyGuest
(
	mach_port_t sport,
	mach_port_t rport,
	OSStatus *rcode,
	SecGuestRef guest,
	FilePathOut path,
	HashDataOut cdhash,
	uint32 *hashLength,
	XMLBlobOut *attributes,
	mach_msg_type_number_t *attributesCnt
);

/* Routine identifyGuest */
mig_internal novalue _XidentifyGuest
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP)
{

#ifdef  __MigPackStructs
#pragma pack(4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		NDR_record_t NDR;
		SecGuestRef guest;
		mach_msg_trailer_t trailer;
	} Request __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack()
#endif
	typedef __Request__identifyGuest_t __Request;
	typedef __Reply__identifyGuest_t Reply __attribute__((unused));

	/*
	 * typedef struct {
	 * 	mach_msg_header_t Head;
	 * 	NDR_record_t NDR;
	 * 	kern_return_t RetCode;
	 * } mig_reply_error_t;
	 */

	Request *In0P = (Request *) InHeadP;
	Reply *OutP = (Reply *) OutHeadP;
	unsigned int msgh_size_delta;

#ifdef	__MIG_check__Request__identifyGuest_t__defined
	kern_return_t check_result;
#endif	/* __MIG_check__Request__identifyGuest_t__defined */

#if	UseStaticTemplates
	const static mach_msg_ool_descriptor_t attributesTemplate = {
		/* addr = */		(void *)0,
		/* size = */		0,
		/* deal = */		FALSE,
		/* copy = */		MACH_MSG_VIRTUAL_COPY,
		/* pad2 = */		0,
		/* type = */		MACH_MSG_OOL_DESCRIPTOR,
	};
#endif	/* UseStaticTemplates */

	kern_return_t RetCode;
	HashDataOut cdhash;
	uint32 hashLength;
	mach_msg_type_number_t attributesCnt;

	__DeclareRcvRpc(20003, "identifyGuest")
	__BeforeRcvRpc(20003, "identifyGuest")

#if	defined(__MIG_check__Request__identifyGuest_t__defined)
	check_result = __MIG_check__Request__identifyGuest_t((__Request *)In0P);
	if (check_result != MACH_MSG_SUCCESS)
		{ MIG_RETURN_ERROR(OutP, check_result); }
#endif	/* defined(__MIG_check__Request__identifyGuest_t__defined) */

#if	UseStaticTemplates
	OutP->attributes = attributesTemplate;
#else	/* UseStaticTemplates */
	OutP->attributes.deallocate =  FALSE;
	OutP->attributes.copy = MACH_MSG_VIRTUAL_COPY;
	OutP->attributes.pad1 = 0;
	OutP->attributes.type = MACH_MSG_OOL_DESCRIPTOR;
#if defined(KERNEL) && !defined(__LP64__)
	OutP->attributes.pad_end = 0;
#endif
#endif	/* UseStaticTemplates */


	attributesCnt = 0;

	RetCode = cshosting_server_identifyGuest(In0P->Head.msgh_request_port, In0P->Head.msgh_reply_port, &OutP->rcode, In0P->guest, OutP->path, cdhash, &hashLength, (XMLBlobOut *)&(OutP->attributes.address), &attributesCnt);
	if (RetCode != KERN_SUCCESS) {
		MIG_RETURN_ERROR(OutP, RetCode);
	}
	OutP->attributes.size = attributesCnt;


	OutP->NDR = NDR_record;

#ifdef __LP64__
	{
		size_t strLength = strlen(OutP->path) + 1;
		if (strLength > 0xffffffff)
			MIG_RETURN_ERROR(OutP, MIG_BAD_ARGUMENTS);
		OutP->pathCnt = (mach_msg_type_number_t) strLength;
	}
#else
	OutP->pathCnt = (mach_msg_type_number_t) strlen(OutP->path) + 1;
#endif /* __LP64__ */
	msgh_size_delta = _WALIGN_((OutP->pathCnt + 3) & ~3);
	OutP->Head.msgh_size = (mach_msg_size_t)(sizeof(Reply) - 1024) + msgh_size_delta;
	OutP = (Reply *) ((pointer_t) OutP + msgh_size_delta - 1024);
	{   typedef struct { char data[64]; } *sp;
	    * (sp) OutP->cdhash = * (sp) cdhash;
	}
	OutP->hashLength = hashLength;
	OutP->attributesCnt = attributesCnt;

	OutP = (Reply *) OutHeadP;
	OutP->Head.msgh_bits |= MACH_MSGH_BITS_COMPLEX;
	OutP->msgh_body.msgh_descriptor_count = 1;
	__AfterRcvRpc(20003, "identifyGuest")
}


#ifdef	mig_external
mig_external
#else
extern
#endif	/* mig_external */
boolean_t cshosting_server(
		mach_msg_header_t *InHeadP,
		mach_msg_header_t *OutHeadP);

#ifdef	mig_external
mig_external
#else
extern
#endif	/* mig_external */
mig_routine_t cshosting_server_routine(
		mach_msg_header_t *InHeadP);


/* Description of this subsystem, for use in direct RPC */
const struct cshosting_server_cshosting_subsystem {
	mig_server_routine_t 	server;	/* Server routine */
	mach_msg_id_t	start;	/* Min routine number */
	mach_msg_id_t	end;	/* Max routine number + 1 */
	unsigned int	maxsize;	/* Max msg size */
	vm_address_t	reserved;	/* Reserved */
	struct routine_descriptor	/*Array of routine descriptors */
		routine[4];
} cshosting_server_cshosting_subsystem = {
	cshosting_server_routine,
	20000,
	20004,
	(mach_msg_size_t)sizeof(union __ReplyUnion__cshosting_server_cshosting_subsystem),
	(vm_address_t)0,
	{
          { (mig_impl_routine_t) 0,
          (mig_stub_routine_t) _XfindGuest, 9, 0, (routine_arg_descriptor_t)0, (mach_msg_size_t)sizeof(__Reply__findGuest_t)},
          { (mig_impl_routine_t) 0,
          (mig_stub_routine_t) _XguestStatus, 5, 0, (routine_arg_descriptor_t)0, (mach_msg_size_t)sizeof(__Reply__guestStatus_t)},
		{0, 0, 0, 0, 0, 0},
          { (mig_impl_routine_t) 0,
          (mig_stub_routine_t) _XidentifyGuest, 9, 0, (routine_arg_descriptor_t)0, (mach_msg_size_t)sizeof(__Reply__identifyGuest_t)},
	}
};

mig_external boolean_t cshosting_server
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP)
{
	/*
	 * typedef struct {
	 * 	mach_msg_header_t Head;
	 * 	NDR_record_t NDR;
	 * 	kern_return_t RetCode;
	 * } mig_reply_error_t;
	 */

	register mig_routine_t routine;

	OutHeadP->msgh_bits = MACH_MSGH_BITS(MACH_MSGH_BITS_REPLY(InHeadP->msgh_bits), 0);
	OutHeadP->msgh_remote_port = InHeadP->msgh_reply_port;
	/* Minimal size: routine() will update it if different */
	OutHeadP->msgh_size = (mach_msg_size_t)sizeof(mig_reply_error_t);
	OutHeadP->msgh_local_port = MACH_PORT_NULL;
	OutHeadP->msgh_id = InHeadP->msgh_id + 100;
	OutHeadP->msgh_reserved = 0;

	if ((InHeadP->msgh_id > 20003) || (InHeadP->msgh_id < 20000) ||
	    ((routine = cshosting_server_cshosting_subsystem.routine[InHeadP->msgh_id - 20000].stub_routine) == 0)) {
		((mig_reply_error_t *)OutHeadP)->NDR = NDR_record;
		((mig_reply_error_t *)OutHeadP)->RetCode = MIG_BAD_ID;
		return FALSE;
	}
	(*routine) (InHeadP, OutHeadP);
	return TRUE;
}

mig_external mig_routine_t cshosting_server_routine
	(mach_msg_header_t *InHeadP)
{
	register int msgh_id;

	msgh_id = InHeadP->msgh_id - 20000;

	if ((msgh_id > 3) || (msgh_id < 0))
		return 0;

	return cshosting_server_cshosting_subsystem.routine[msgh_id].stub_routine;
}
